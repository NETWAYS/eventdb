object CheckCommand "eventdb" {
  import "plugin-check-command"
  command = [ PluginDir + "/check_eventdb.py" ]

  arguments = {
    "-H" = {
      value = "$eventdb_host$"
      description = "Hostname as logged by agent."
    }
    "--priority" = {
      value = "$eventdb_priority$"
      description = "Priority as logged by agent."
    }
    "--msg" = {
      value = "$eventdb_message_text$"
      description = "Message as logged by agent (SQL Format wildcards)."
    }
    "--type" = {
      value = "$eventdb_type$"
      description = "The logtype (e.g. syslog, snmptrap, mail)."
    }
    "--program" = {
      value = "$eventdb_program$"
      description = "Program as logged by agent."
    }
    "--db" = "$eventdb_database$"
    "--dbtable" = "$eventdb_table$"
    "--dbuser" = "$eventdb_dbuser$"
    "--dbpassword" = "$eventdb_dbpassword$"
    "--dbhost" = "$eventdb_dbhost$"
    "--label" = {
      value = "$eventdb_label$"
      description = "label for plugin output"
    }
    "--url" = {
      value = "$eventdb_url$"
      description = "URL for EventDB link in plugin output"
    }
    "--maxage" = {
      value = "$eventdb_maxage$"
      description = "Max age of EventDB entry (eg. 1m, 2h, 3d)"
    }
    "--resetregexp" = {
      value = "$eventdb_resetregexp$"
      description = "Regular Expression for message entry in eventdb to change each state back to OK."
    }
    "--facility" = {
      value = "$eventdb_facility$"
      description = "syslog facility"
    }
    "--perfdata" = {
      value = "$eventdb_perfdata$"
      description = "performance data from the last check (e.g. \\$service.perfdata\\$)"
    }
    "--warning" = "$eventdb_warning$"
    "--critical" = "$eventdb_critical$"
  }

  vars.eventdb_db = "eventdb"
  vars.eventdb_table = "events"
  vars.eventdb_dbuser = "eventdb"
  vars.eventdb_dbpassword = "eventdb"
  vars.eventdb_dbhost = "localhost"
}


apply Service "eventdb-error" {
  import "generic-service"
  display_name = "Event DB Error"
  check_command = "eventdb"

  /* command arguments */
  vars.eventdb_priority = "0,1,2"
  vars.eventdb_message_text = "%ssh%"
  vars.eventdb_warning = 1
  vars.eventdb_critical = 2
  vars.eventdb_facility = 4
  vars.eventdb_label = "ssh_errors"

  /* icinga web cronk */
  vars.edb_filter = "{'msg': {type:'exact','message' : '%ssh%', isRegexp: false}, 'sourceExclusion': [],'priorityExclusion': [3,5,4,7,6], 'facilityExclusion': [], 'startTime': -1 }"

  assign where host.name == NodeName
}
