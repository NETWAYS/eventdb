diff --git a/../../../Downloads/snmptt_1.3/snmptt b/usr/sbin/snmptt
index eeadeb4..96f03d1 100755
--- a/../../../Downloads/snmptt_1.3/snmptt
+++ b/usr/sbin/snmptt
@@ -269,6 +269,21 @@ my $postgresql_dbi_password;
 my $postgresql_ping_on_insert;
 my $postgresql_ping_interval;
 
+my $oracle_dbi_enable;
+my $oracle_dbi_module;
+my $oracle_dbi_hostport_enable;
+my $oracle_dbi_host;
+my $oracle_dbi_port;
+my $oracle_dbi_sid;
+my $oracle_dbi_table;
+my $oracle_dbi_table_unknown;
+my $oracle_dbi_table_statistics;
+my $oracle_dbi_username;
+my $oracle_dbi_password;
+my $oracle_ping_on_insert;
+my $oracle_ping_interval;
+
+
 my $dbd_odbc_enable;
 my $dbd_odbc_dsn;
 my $dbd_odbc_table;
@@ -529,6 +544,30 @@ if ($postgresql_dbi_enable == 1)
   }
 }    
 
+if ($oracle_dbi_enable == 1)
+{
+  eval 'require DBI;';
+  if ($@) {
+    warn $@;
+    print "\nCould not load the Perl module DBI!  If mysql_dbi_enable\n";
+    print "is enabled then the DBI module is required.  Please see snmptt.html\n";
+    print "for system requirements.\n\n";
+    die "died";
+  }
+  require DBI;
+
+  eval 'require DBD::Oracle;';
+  if ($@) {
+    warn $@;
+    print "\nCould not load the Perl module DBD::mysql!  If mysql_dbi_enable\n";
+    print "is enabled then the DBD::mysql module is required.  Please see snmptt.html\n";
+    print "for system requirements.\n\n";
+    die "died";
+  }
+  require DBD::Oracle;
+}
+
+
 if ($dbd_odbc_enable == 1)
 {
   eval 'require DBI;';
@@ -621,12 +660,14 @@ my $g_last_statistics_logged = $g_start_time;
 # Global variables for SQL
 my $dbh_mysql;
 my $dbh_postgresql;
+my $dbh_oracle;
 my $dbh_odbc;
 my $dbh_win32_odbc;
 
 # Global variables for SQL ping
 my $g_last_mysql_ping = $g_start_time;
 my $g_last_postgresql_ping = $g_start_time;
+my $g_last_oracle_ping = $g_start_time;
 my $g_last_dbd_odbc_ping = $g_start_time;
 
 # Global variables for daemon mode
@@ -1138,6 +1179,12 @@ if ($daemon == 1)
       }
     }
 
+    if ($oracle_dbi_enable == 1 && $oracle_ping_interval > 0) {
+      if (time() >= ($g_last_oracle_ping + $oracle_ping_interval)) {
+        &oracle_ping();
+      }
+    }
+
     if ($dbd_odbc_enable == 1 && $dbd_odbc_ping_interval > 0) {
       if (time() >= ($g_last_dbd_odbc_ping + $dbd_odbc_ping_interval)) {
         &dbd_odbc_ping();
@@ -1908,6 +1955,49 @@ sub processtrap
           }
         }
 
+	if ($oracle_dbi_enable == 1)
+        {
+          $trap_attempted_to_log++;
+
+          # Backslash any quotes
+          my $message_short2 = $message_short;
+          $message_short2 =~ s(\')(\\\')g;   #'
+          $message_short2 =~ s(\")(\\\")g;   #"
+
+          my $community = $var[5];
+          $community =~ s(\')(\\\')g;   #'
+          $community =~ s(\")(\\\")g;   #"
+
+          my @t_sql_custom_columns = ();
+          
+          if (@sql_custom_columns) {
+            @t_sql_custom_columns = @sql_custom_columns;
+            
+            for (my $i = 1; $i <= $#t_sql_custom_columns; $i+=2) {
+              $_ = $t_sql_custom_columns[$i];
+              print "Performing substitution on custom column: $_\n";
+              &substitute();
+              print "Done performing substitution on custom column: $_\n";
+              $t_sql_custom_columns[$i] = $_;
+            }
+          }
+
+          if (&oracle_insert($oracle_dbi_table,
+            "host_name",    $agent_dns_name,        # $A
+            "host_address", getBinaryIpV6($var[4]), # $aA
+            "type",         1, # SNMP Trap
+            "facility",     undef, # EventDB shall allow NULL, as
+                               # there is no SNMP facility
+            "priority", getNumericPriority($event2[2]), # $s
+            "program", "snmptrap",
+            "message", $message_short2,
+            "created", $trap_date_time_sql,
+            @t_sql_custom_columns) == 1 ) { # 
+            $trap_successfully_logged++;
+          }
+        }
+
+
         if ($dbd_odbc_enable == 1)                       
         {
           $trap_attempted_to_log++;
@@ -3844,6 +3934,43 @@ sub searchfortrap
 
       }
 
+      if ($oracle_dbi_enable == 1 && defined ($dbh_oracle) && $oracle_dbi_table_unknown ne "")
+      {
+        # Backslash any quotes
+        my $message_short2 = $message_short;
+        $message_short2 =~ s(\')(\\\')g;   #'
+        $message_short2 =~ s(\")(\\\")g;   #"
+
+        my $community = $var[5];
+        $community =~ s(\')(\\\')g;   #'
+        $community =~ s(\")(\\\")g;   #"
+
+        my @t_sql_custom_columns_unknown = ();
+          
+        if (@sql_custom_columns_unknown) {
+          @t_sql_custom_columns_unknown = @sql_custom_columns_unknown;
+            
+          for (my $i = 1; $i <= $#t_sql_custom_columns_unknown; $i+=2) {
+            $_ = $t_sql_custom_columns_unknown[$i];
+            print "Performing substitution on custom column: $_\n";
+            &substitute();
+            print "Done performing substitution on custom column: $_\n";
+            $t_sql_custom_columns_unknown[$i] = $_;
+          }
+        }
+
+        &oracle_insert($oracle_dbi_table_unknown,
+          "host_name",    $agent_dns_name,
+          "host_address", getBinaryIpV6($var[4]),
+          "type",         1,
+          "facility",     0,
+          "priority", getNumericPriority($event2[2]),
+          "program", "snmptrap",
+          "message", $message_short2,
+          "created", $trap_date_time_sql,
+          @t_sql_custom_columns_unknown);
+
+      }
       if ($dbd_odbc_enable == 1 && defined ($dbh_odbc) && $dbd_odbc_table_unknown ne "")
       {
         # Double any single quotes
@@ -4146,6 +4273,21 @@ sub loadsnmpttini {
   $postgresql_ping_on_insert = $cfg->val('SQL', 'postgresql_ping_on_insert');
   $postgresql_ping_interval = $cfg->val('SQL', 'postgresql_ping_interval');
 
+  $oracle_dbi_enable = $cfg->val('SQL', 'oracle_dbi_enable');
+  $oracle_dbi_module = $cfg->val('SQL', 'oracle_dbi_module');
+  $oracle_dbi_hostport_enable = $cfg->val('SQL', 'oracle_dbi_hostport_enable');
+  $oracle_dbi_host = $cfg->val('SQL', 'oracle_dbi_host');
+  $oracle_dbi_port = $cfg->val('SQL', 'oracle_dbi_port');
+  $oracle_dbi_sid = $cfg->val('SQL', 'oracle_dbi_sid');
+  $oracle_dbi_table = $cfg->val('SQL', 'oracle_dbi_table');
+  $oracle_dbi_table_unknown = $cfg->val('SQL', 'oracle_dbi_table_unknown');
+  $oracle_dbi_table_statistics = $cfg->val('SQL', 'oracle_dbi_table_statistics');
+  $oracle_dbi_username = $cfg->val('SQL', 'oracle_dbi_username');
+  $oracle_dbi_password = $cfg->val('SQL', 'oracle_dbi_password');
+  $oracle_ping_on_insert = $cfg->val('SQL', 'oracle_ping_on_insert');
+  $oracle_ping_interval = $cfg->val('SQL', 'oracle_ping_interval');
+
+
   $dbd_odbc_enable = $cfg->val('SQL', 'dbd_odbc_enable');
   $dbd_odbc_dsn = $cfg->val('SQL', 'dbd_odbc_dsn');
   $dbd_odbc_table = $cfg->val('SQL', 'dbd_odbc_table');
@@ -4281,6 +4423,19 @@ sub loadsnmpttini {
   if (! defined ($postgresql_dbi_password)) { $postgresql_dbi_password = ''} ;
   if (! defined ($postgresql_ping_on_insert)) { $postgresql_ping_on_insert = 1} ;
   if (! defined ($postgresql_ping_interval)) { $postgresql_ping_interval = 500} ;
+  if (! defined ($oracle_dbi_enable)) { $oracle_dbi_enable = 0} ;
+  if (! defined ($oracle_dbi_module)) { $oracle_dbi_module = 0} ;
+  if (! defined ($oracle_dbi_hostport_enable)) { $oracle_dbi_hostport_enable = 0} ;
+  if (! defined ($oracle_dbi_host)) { $oracle_dbi_host = 'localhost'} ;
+  if (! defined ($oracle_dbi_port)) { $oracle_dbi_port = '1521'} ;
+  if (! defined ($oracle_dbi_sid)) { $oracle_dbi_sid = ''} ;
+  if (! defined ($oracle_dbi_table)) { $oracle_dbi_table = ''} ;
+  if (! defined ($oracle_dbi_table_unknown)) { $oracle_dbi_table_unknown = ''} ;
+  if (! defined ($oracle_dbi_table_statistics)) { $oracle_dbi_table_statistics = ''} ;
+  if (! defined ($oracle_dbi_username)) { $oracle_dbi_username = ''} ;
+  if (! defined ($oracle_dbi_password)) { $oracle_dbi_password = ''} ;
+  if (! defined ($oracle_ping_on_insert)) { $oracle_ping_on_insert = 1} ;
+  if (! defined ($oracle_ping_interval)) { $oracle_ping_interval = 500} ;
   if (! defined ($dbd_odbc_enable)) { $dbd_odbc_enable = 0} ;
   if (! defined ($dbd_odbc_dsn)) { $dbd_odbc_dsn = ''} ;
   if (! defined ($dbd_odbc_table)) { $dbd_odbc_table = ''} ;
@@ -5311,6 +5466,26 @@ sub log_statistics {
       "total_unknown", $g_total_traps_unknown);
   }
 
+  if ($oracle_dbi_enable == 1 && defined ($dbh_oracle) && $oracle_dbi_table_statistics ne "")
+  {
+    my $stat_time_temp;
+
+    if ($stat_time_format_sql eq "") {
+      $stat_time_temp = localtime();
+    }
+    else {
+      $stat_time_temp = strftime $stat_time_format_sql, localtime();
+    }
+
+    &oracle_insert($oracle_dbi_table_statistics,
+      "stat_time", $stat_time_temp,
+      "total_received", $g_total_traps_received,
+      "total_translated", $g_total_traps_translated,
+      "total_ignored", $g_total_traps_ignored,
+      "total_unknown", $g_total_traps_unknown);
+  }
+
+
   if ($dbd_odbc_enable == 1 && defined ($dbh_odbc) && $dbd_odbc_table_statistics ne "")
   {
     my $stat_time_temp;
@@ -5363,6 +5538,7 @@ sub signal_log_statistics {
 sub create_db_connections {
   &dbh_mysql_connect();
   &dbh_postgresql_connect();
+  &dbh_oracle_connect();
   &dbh_odbc_connect();
   &dbh_win32_odbc_connect();
 }
@@ -5370,6 +5546,7 @@ sub create_db_connections {
 sub close_db_connections {
   &dbh_mysql_close();
   &dbh_postgresql_close();
+  &dbh_oracle_close();
   &dbh_odbc_close();
   &dbh_win32_odbc_close();
 }
@@ -5390,6 +5567,14 @@ sub dbh_postgresql_close {
   }
 }
 
+sub dbh_oracle_close {
+  if (defined $dbh_oracle)
+  {
+    $dbh_oracle->disconnect;
+    $dbh_oracle = undef;
+  }
+}
+
 sub dbh_odbc_close {
   if (defined $dbh_odbc)
   {
@@ -5488,6 +5673,39 @@ sub dbh_postgresql_connect() {
   }
 }
 
+sub dbh_oracle_connect() {
+  if ($oracle_dbi_enable == 1)
+  {
+    &dbh_oracle_close();
+
+    unless ($dbh_oracle = DBI->connect("DBI:Oracle:SID=$oracle_dbi_sid;host=$oracle_dbi_host;
+        port=$oracle_dbi_port",$oracle_dbi_username,$oracle_dbi_password) )
+    {
+      my $msg = "DBI:Oracle error: Unable to connect to database: $DBI::errstr";
+      warn $msg, "\n";
+      if ($DEBUGGING >= 1)
+      {
+        print $msg, "\n";
+      }
+      if ($syslog_system_enable == 1)
+      {
+        syslog_system($msg);
+      }
+      if ($log_system_enable == 1)
+      {
+        log_system($msg);
+      }
+      if ($eventlog_system_enable == 1)
+      {
+        eventlog_system($msg,12,$eventlog_error);
+      }
+    }
+#Tue Aug 30 20:45:29 2011
+    $dbh_oracle->prepare('ALTER SESSION SET NLS_DATE_FORMAT = "DY MON DD HH24:MI:SS YYYY"')->execute();
+  }
+
+}
+
 sub dbh_odbc_connect() { 
   if ($dbd_odbc_enable == 1)
   {
@@ -5580,6 +5798,29 @@ sub postgresql_ping {
   }
 }
 
+
+sub oracle_ping {
+  if ($oracle_dbi_enable == 1) {
+    if (defined ($dbh_oracle)) {
+      my $rc = $dbh_oracle->ping;
+      if (!$rc) { 
+        &dbh_oracle_connect();
+      }
+    }
+    else {
+      &dbh_oracle_connect();
+    }
+  }
+
+  $g_last_oracle_ping = time();
+
+  if ($DEBUGGING >= 2)
+  {
+    print "Oracle Ping\n"
+  }
+}
+
+
 sub dbd_odbc_ping {
   if ($dbd_odbc_enable == 1) {
     if (defined ($dbh_odbc)) {
@@ -5835,6 +6076,123 @@ sub postgresql_insert {
   return 0;
 }
 
+sub oracle_insert {
+  my $table = shift;
+  my @data = @_;
+
+  # If the number of elements in @data is odd, remove the last element
+  # Note:  $# returns the last element # so it's reall #$data + 1
+  #print "mod :" . $#data % 2 . "\n";
+  if ($#data % 2 == 0) {
+    pop @data;
+  }
+  
+  #print "------------------ oracle_insert ---------------\n";
+    
+  my $sql_prepare = "INSERT INTO $table (";
+  my @sql_execute;
+  
+  for (my $i = 0; $i < $#data;) {
+    #print $data[$i]. "\n";
+    $sql_prepare .= $data[$i];
+    push (@sql_execute, $data[$i+1]);
+    
+    $i+=2;
+        
+    if ($i < ($#data)) {
+      $sql_prepare .= ",";
+      }
+  }
+  $sql_prepare .= ") VALUES (?";
+  $sql_prepare .= ",?" x ($#data / 2);
+  $sql_prepare .= ")";
+  
+  #foreach my $x (@sql_execute) {
+  #  print "$x\n";
+  #}
+  
+  #print "sql_prepare: $sql_prepare\n";
+  #print "sql_execute: @sql_execute\n";
+
+  # Make sure the connection is up
+  if ($oracle_ping_on_insert == 1) {
+    &oracle_ping();
+  }
+  
+  if (defined ($dbh_oracle)) {
+    my $prepare_successful = 0;
+    my $do_successful = 0;
+
+    #my $sql_statement = "INSERT INTO $oracle_dbi_table (eventname, eventid, 
+    #trapoid, enterprise, community, hostname, agentip, category, severity, 
+    #uptime, traptime, formatline) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
+
+    my $sth_oracle = $dbh_oracle->prepare($sql_prepare);
+    unless (defined ($sth_oracle)) {
+      my $msg = "Oracle error " . $dbh_oracle->{'errno'} . ": Unable to perform PREPARE: ".$dbh_oracle->errstr;                             
+      warn $msg, "\n";
+
+      if ($DEBUGGING >= 1)
+      {
+        print $msg, "\n";
+      }
+
+      if ($syslog_system_enable == 1)
+      {
+        syslog_system($msg);
+      }
+      if ($log_system_enable == 1)
+      {
+        log_system($msg);
+      }
+      if ($eventlog_system_enable == 1)
+      {
+        eventlog_system($msg,23,$eventlog_error);
+      }
+    }
+    else {
+      $prepare_successful = 1;
+    }
+
+    if ($prepare_successful == 1)
+    {
+      unless (defined ($sth_oracle->execute(@sql_execute))) {
+        my $msg = "MySQL error " . $dbh_oracle->{'errno'} . ": Unable to perform INSERT INTO (EXECUTE): ".$dbh_oracle->errstr;
+        warn $msg, "\n";
+
+        if ($DEBUGGING >= 1)
+        {
+          print $msg, "\n";
+        }
+
+        if ($syslog_system_enable == 1)
+        {
+          syslog_system($msg);
+        }
+
+        if ($log_system_enable == 1)
+        {
+          log_system($msg);
+        }
+
+        if ($eventlog_system_enable == 1)
+        {
+          eventlog_system($msg,15,$eventlog_error);
+        }
+      }
+      else {
+        $do_successful = 1;
+      }
+    }
+
+    if ($do_successful == 1)  
+    {
+      return 1;
+    }
+  }
+  return 0;
+}
+
 sub odbc_insert {
   my $table = shift;
   my @data = @_;
