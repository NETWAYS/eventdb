--- snmptt	2009-11-07 22:39:49.000000000 +0100
+++ snmptt_oracle	2012-01-26 18:56:39.762475904 +0100
@@ -286,6 +286,22 @@
 my $sql_win32_odbc_username;
 my $sql_win32_odbc_password;
 
+my $oracle_dbi_enable;
+my $oracle_dbi_module;
+my $oracle_dbi_timeformat;
+my $oracle_dbi_hostport_enable;
+my $oracle_dbi_host;
+my $oracle_dbi_port;
+my $oracle_dbi_sid;
+my $oracle_dbi_table;
+my $oracle_dbi_table_unknown;
+my $oracle_dbi_table_statistics;
+my $oracle_dbi_username;
+my $oracle_dbi_password;
+my $oracle_ping_on_insert;
+my $oracle_ping_interval;
+
+
 my @sql_custom_columns;
 my @sql_custom_columns_unknown;
 
@@ -562,7 +578,28 @@
   }
   require Win32::ODBC;
 }
+if ($oracle_dbi_enable == 1)
+{
+  eval 'require DBI;';
+  if ($@) {
+    warn $@;
+    print "\nCould not load the Perl module DBI!  If oracle_dbi_enable\n";
+    print "is enabled then the DBI module is required.  Please see snmptt.html\n";
+    print "for system requirements.\n\n";
+    die "died";
+  }
+  require DBI;
 
+  eval 'require DBD::Oracle;';
+  if ($@) {
+    warn $@;
+    print "\nCould not load the Perl module DBD::Oracle!  If oracle_dbi_enable\n";
+    print "is enabled then the DBD::Oracle module is required.  Please see snmptt.html\n";
+    print "for system requirements.\n\n";
+    die "died";
+  }
+  require DBD::Oracle;
+}
 
 ##############################################################################
 ####  MAIN SECTION START
@@ -607,11 +644,13 @@
 my $dbh_postgresql;
 my $dbh_odbc;
 my $dbh_win32_odbc;
+my $dbh_oracle;
 
 # Global variables for SQL ping
 my $g_last_mysql_ping = $g_start_time;
 my $g_last_postgresql_ping = $g_start_time;
 my $g_last_dbd_odbc_ping = $g_start_time;
+my $g_last_oracle_ping = $g_start_time;
 
 # Global variables for daemon mode
 my $timetoreload;
@@ -1101,6 +1140,12 @@
         &dbd_odbc_ping();
       }
     }
+    
+    if ($oracle_dbi_enable == 1 && $oracle_ping_interval > 0) {
+      if (time() >= ($g_last_oracle_ping + $oracle_ping_interval)) {
+        &oracle_ping();
+      }
+    }
 
     if ($timetologstatistics == 1)
     {
@@ -1946,6 +1991,48 @@
             $trap_successfully_logged++;
           }
         }
+ 	if ($oracle_dbi_enable == 1)
+        {
+           $trap_attempted_to_log++;
+ 
+           # Backslash any quotes
+           my $message_short2 = $message_short;
+           $message_short2 =~ s(\')(\\\')g;   #'
+           $message_short2 =~ s(\")(\\\")g;   #"
+ 
+           my $community = $var[5];
+           $community =~ s(\')(\\\')g;   #'
+           $community =~ s(\")(\\\")g;   #"
+ 
+           my @t_sql_custom_columns = ();
+           
+           if (@sql_custom_columns) {
+             @t_sql_custom_columns = @sql_custom_columns;
+             
+             for (my $i = 1; $i <= $#t_sql_custom_columns; $i+=2) {
+               $_ = $t_sql_custom_columns[$i];
+               print "Performing substitution on custom column: $_\n";
+               &substitute();
+               print "Done performing substitution on custom column: $_\n";
+               $t_sql_custom_columns[$i] = $_;
+             }
+           }
+ 
+           if (&oracle_insert($oracle_dbi_table,
+             "host_name",    $agent_dns_name,        # $A
+             "host_address", getBinaryIpV6($var[4]), # $aA
+             "type",         1, # SNMP Trap
+             "facility",     undef, # EventDB shall allow NULL, as
+                                # there is no SNMP facility
+             "priority", getNumericPriority($event2[2]), # $s
+             "program", "snmptrap",
+             "message", $message_short2,
+             "created", $trap_date_time_sql,
+             @t_sql_custom_columns) == 1 ) { # 
+             $trap_successfully_logged++;
+           }
+      	}
+ 
 
       } # end block for if ($event2[3] ne '') if FORMAT string has been defined
       else
@@ -3624,6 +3711,7 @@
       my $message_short;
       if ( ($mysql_dbi_enable == 1) ||
         ($postgresql_dbi_enable == 1) ||
+        ($oracle_dbi_enable == 1) ||
         ($dbd_odbc_enable == 1) ||
         ($sql_win32_odbc_enable == 1) ) {
 
@@ -3799,7 +3887,46 @@
           @t_sql_custom_columns_unknown);
 
       }
+      if ($oracle_dbi_enable == 1 && defined ($dbh_oracle) && $oracle_dbi_table_unknown ne "")
+      {
+         # Backslash any quotes
+         my $message_short2 = $message_short;
+         $message_short2 =~ s(\')(\\\')g;   #'
+         $message_short2 =~ s(\")(\\\")g;   #"
+ 
+         my $community = $var[5];
+         $community =~ s(\')(\\\')g;   #'
+         $community =~ s(\")(\\\")g;   #"
+ 
+         my @t_sql_custom_columns_unknown = ();
+           
+         if (@sql_custom_columns_unknown) {
+           @t_sql_custom_columns_unknown = @sql_custom_columns_unknown;
+             
+           for (my $i = 1; $i <= $#t_sql_custom_columns_unknown; $i+=2) {
+             $_ = $t_sql_custom_columns_unknown[$i];
+             print "Performing substitution on custom column: $_\n";
+             &substitute();
+             print "Done performing substitution on custom column: $_\n";
+             $t_sql_custom_columns_unknown[$i] = $_;
+           }
+         }
+ 
+         &oracle_insert($oracle_dbi_table_unknown,
+           "host_name",    $agent_dns_name,
+           "host_address", getBinaryIpV6($var[4]),
+           "type",         1,
+           "facility",     0,
+           "priority", getNumericPriority($event2[2]),
+           "program", "snmptrap",
+           "message", $message_short2,
+           "created", $trap_date_time_sql,
+           @t_sql_custom_columns_unknown);
+ 
+      }
+
     }
+
   }
 
   # If keep_unlogged_traps is set to 0, or if we didn't even try to log, set it as a successful log 
@@ -4046,7 +4173,21 @@
   $sql_win32_odbc_table_statistics = $cfg->val('SQL', 'sql_win32_odbc_table_statistics');
   $sql_win32_odbc_username = $cfg->val('SQL', 'sql_win32_odbc_username');
   $sql_win32_odbc_password = $cfg->val('SQL', 'sql_win32_odbc_password');
-
+  $oracle_dbi_enable = $cfg->val('SQL', 'oracle_dbi_enable');
+  $oracle_dbi_module = $cfg->val('SQL', 'oracle_dbi_module');
+  $oracle_dbi_hostport_enable = $cfg->val('SQL', 'oracle_dbi_hostport_enable');
+  $oracle_dbi_timeformat = $cfg->val('SQL', 'oracle_dbi_timeformat');
+  $oracle_dbi_host = $cfg->val('SQL', 'oracle_dbi_host');
+  $oracle_dbi_port = $cfg->val('SQL', 'oracle_dbi_port');
+  $oracle_dbi_sid = $cfg->val('SQL', 'oracle_dbi_sid');
+  $oracle_dbi_table = $cfg->val('SQL', 'oracle_dbi_table');
+  $oracle_dbi_table_unknown = $cfg->val('SQL', 'oracle_dbi_table_unknown');
+  $oracle_dbi_table_statistics = $cfg->val('SQL', 'oracle_dbi_table_statistics');
+  $oracle_dbi_username = $cfg->val('SQL', 'oracle_dbi_username');
+  $oracle_dbi_password = $cfg->val('SQL', 'oracle_dbi_password');
+  $oracle_ping_on_insert = $cfg->val('SQL', 'oracle_ping_on_insert');
+  $oracle_ping_interval = $cfg->val('SQL', 'oracle_ping_interval');
+  
   @sql_custom_columns = $cfg->val('SQL', 'sql_custom_columns');
   @sql_custom_columns_unknown = $cfg->val('SQL', 'sql_custom_columns_unknown');
 
@@ -4179,6 +4320,19 @@
   if (! defined ($sql_win32_odbc_table_statistics)) { $sql_win32_odbc_table_statistics = ''} ;
   if (! defined ($sql_win32_odbc_username)) { $sql_win32_odbc_username = ''} ;
   if (! defined ($sql_win32_odbc_password)) { $sql_win32_odbc_password = ''} ;
+  if (! defined ($oracle_dbi_enable)) { $oracle_dbi_enable = 0} ;
+  if (! defined ($oracle_dbi_module)) { $oracle_dbi_module = 0} ;
+  if (! defined ($oracle_dbi_hostport_enable)) { $oracle_dbi_hostport_enable = 0} ;
+  if (! defined ($oracle_dbi_host)) { $oracle_dbi_host = 'localhost'} ;
+  if (! defined ($oracle_dbi_port)) { $oracle_dbi_port = '1521'} ;
+  if (! defined ($oracle_dbi_sid)) { $oracle_dbi_sid = ''} ;
+  if (! defined ($oracle_dbi_table)) { $oracle_dbi_table = ''} ;
+  if (! defined ($oracle_dbi_table_unknown)) { $oracle_dbi_table_unknown = ''} ;
+  if (! defined ($oracle_dbi_table_statistics)) { $oracle_dbi_table_statistics = ''} ;
+  if (! defined ($oracle_dbi_username)) { $oracle_dbi_username = ''} ;
+  if (! defined ($oracle_dbi_password)) { $oracle_dbi_password = ''} ;
+  if (! defined ($oracle_ping_on_insert)) { $oracle_ping_on_insert = 1} ;
+  if (! defined ($oracle_ping_interval)) { $oracle_ping_interval = 500} ;
   if (! (@sql_custom_columns)) { @sql_custom_columns = ()} ;
   if (! (@sql_custom_columns_unknown)) { @sql_custom_columns_unknown = ()} ;
   if (! defined ($DEBUGGING)) { $DEBUGGING = 0} ;
@@ -5229,6 +5383,27 @@
       "total_ignored", $g_total_traps_ignored,
       "total_unknown", $g_total_traps_unknown);
   }
+  
+
+  if ($oracle_dbi_enable == 1 && defined ($dbh_oracle) && $oracle_dbi_table_statistics ne "")
+  {
+    my $stat_time_temp;
+ 
+    if ($stat_time_format_sql eq "") {
+       $stat_time_temp = localtime();
+     }
+     else {
+       $stat_time_temp = strftime $stat_time_format_sql, localtime();
+     }
+ 
+     &oracle_insert($oracle_dbi_table_statistics,
+       "stat_time", $stat_time_temp,
+       "total_received", $g_total_traps_received,
+       "total_translated", $g_total_traps_translated,
+       "total_ignored", $g_total_traps_ignored,
+       "total_unknown", $g_total_traps_unknown);
+  }
+ 
 
   $g_last_statistics_logged = time();
 }
@@ -5246,6 +5421,7 @@
   &dbh_postgresql_connect();
   &dbh_odbc_connect();
   &dbh_win32_odbc_connect();
+  &dbh_oracle_connect();
 }
 
 sub close_db_connections {
@@ -5253,6 +5429,7 @@
   &dbh_postgresql_close();
   &dbh_odbc_close();
   &dbh_win32_odbc_close();
+  &dbh_oracle_close();
 }
 
 sub dbh_mysql_close {
@@ -5287,6 +5464,15 @@
   }
 }
 
+sub dbh_oracle_close {
+  if (defined $dbh_oracle)
+  {
+    $dbh_oracle->disconnect;
+    $dbh_oracle = undef;
+  }
+}
+
+
 sub dbh_mysql_connect() {
   if ($mysql_dbi_enable == 1)
   {
@@ -5419,6 +5605,39 @@
   }
 }
 
+sub dbh_oracle_connect() {
+  if ($oracle_dbi_enable == 1)
+  {
+    &dbh_oracle_close();
+
+    unless ($dbh_oracle = DBI->connect("DBI:Oracle:SID=$oracle_dbi_sid;host=$oracle_dbi_host;
+        port=$oracle_dbi_port",$oracle_dbi_username,$oracle_dbi_password) )
+    {
+      my $msg = "DBI:Oracle error: Unable to connect to database: $DBI::errstr";
+      warn $msg, "\n";
+      if ($DEBUGGING >= 1)
+      {
+        print $msg, "\n";
+      }
+      if ($syslog_system_enable == 1)
+      {
+        syslog_system($msg);
+      }
+      if ($log_system_enable == 1)
+      {
+        log_system($msg);
+      }
+      if ($eventlog_system_enable == 1)
+      {
+        eventlog_system($msg,12,$eventlog_error);
+      }
+    }
+
+    $dbh_oracle->prepare('ALTER SESSION SET NLS_DATE_FORMAT = "DY MON DD HH24:MI:SS YYYY"')->execute();
+ 
+}
+
+
 sub mysql_ping {
   if ($mysql_dbi_enable == 1) {
     if (defined ($dbh_mysql)) {
@@ -5482,6 +5701,27 @@
   }
 }
 
+sub oracle_ping {
+  if ($oracle_dbi_enable == 1) {
+    if (defined ($dbh_oracle)) {
+      my $rc = $dbh_oracle->ping;
+      if (!$rc) { 
+        &dbh_oracle_connect();
+      }
+    }
+    else {
+      &dbh_oracle_connect();
+    }
+  }
+
+  $g_last_oracle_ping = time();
+
+  if ($DEBUGGING >= 2)
+  {
+    print "Oracle Ping\n"
+  }
+}
+
 sub mysql_insert {
   my $table = shift;
   my @data = @_;
@@ -5859,3 +6099,158 @@
   return 0;
   }
 }
+
+sub oracle_insert {
+  my $table = shift;
+  my @data = @_;
+
+  # If the number of elements in @data is odd, remove the last element
+  # Note:  $# returns the last element # so it's reall #$data + 1
+  #print "mod :" . $#data % 2 . "\n";
+  if ($#data % 2 == 0) {
+    pop @data;
+  }
+  
+  #print "------------------ oracle_insert ---------------\n";
+    
+  my $sql_prepare = "INSERT INTO $table (";
+  my @sql_execute;
+  
+  # Create padded binary string that can be feeded to Oracle's RAW fields
+  my @array = unpack("C*", @data[3]);
+  my $raw_address = "";
+  foreach my $byte (@array) { 
+     if($byte < 0x10) {
+         $raw_address = $raw_address.sprintf("0%x",$byte);
+     } else {
+	$raw_address = $raw_address.sprintf("%x",$byte);
+     }
+  } 
+  @data[3] = $raw_address;
+  
+  for (my $i = 0; $i < $#data;) {
+    #print $data[$i]. "\n";
+    $sql_prepare .= $data[$i];
+    push (@sql_execute, $data[$i+1]);
+    
+    $i+=2;
+        
+    if ($i < ($#data)) {
+      $sql_prepare .= ",";
+    }
+  }
+  $sql_prepare .= ") VALUES (?,?,?, ?, ?, ?, ?, ?) ";
+
+  #foreach my $x (@sql_execute) {
+  #  print "$x\n";
+  #}
+  
+  #print "sql_prepare: $sql_prepare\n";
+  #print "sql_execute: @sql_execute\n";
+
+  # Make sure the connection is up
+  if ($oracle_ping_on_insert == 1) {
+    &oracle_ping();
+  }
+  
+  if (defined ($dbh_oracle)) {
+    my $prepare_successful = 0;
+    my $do_successful = 0;
+
+    #my $sql_statement = "INSERT INTO $oracle_dbi_table (eventname, eventid, 
+    #trapoid, enterprise, community, hostname, agentip, category, severity, 
+    #uptime, traptime, formatline) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
+
+    my $sth_oracle = $dbh_oracle->prepare($sql_prepare);
+    unless (defined ($sth_oracle)) {
+      my $msg = "Oracle error " . $dbh_oracle->{'errno'} . ": Unable to perform PREPARE: ".$dbh_oracle->errstr;                             
+      warn $msg, "\n";
+
+      if ($DEBUGGING >= 1)
+      {
+        print $msg, "\n";
+      }
+
+      if ($syslog_system_enable == 1)
+      {
+        syslog_system($msg);
+      }
+      if ($log_system_enable == 1)
+      {
+        log_system($msg);
+      }
+      if ($eventlog_system_enable == 1)
+      {
+        eventlog_system($msg,23,$eventlog_error);
+      }
+    }
+    else {
+      $prepare_successful = 1;
+    }
+
+    if ($prepare_successful == 1)
+    {
+      unless (defined ($sth_oracle->execute(@sql_execute))) {
+        my $msg = "Oracle error " . $dbh_oracle->{'errno'} . ": Unable to perform INSERT INTO (EXECUTE): ".$dbh_oracle->errstr;
+        warn $msg, "\n";
+
+        if ($DEBUGGING >= 1)
+        {
+          print $msg, "\n";
+        }
+
+        if ($syslog_system_enable == 1)
+        {
+          syslog_system($msg);
+        }
+
+        if ($log_system_enable == 1)
+        {
+          log_system($msg);
+        }
+
+        if ($eventlog_system_enable == 1)
+        {
+          eventlog_system($msg,15,$eventlog_error);
+        }
+      }
+      else {
+        $do_successful = 1;
+      }
+    }
+
+    if ($do_successful == 1)  
+    {
+      return 1;
+    }
+  }
+  return 0;
+}
+ 
+sub getBinaryIpV6 {
+    use NetAddr::IP::Util qw(ipv6_aton);
+    my $ip = shift;
+    $ip = '::ffff:' . $ip if $ip =~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
+    return ipv6_aton($ip);
+}
+
+sub getNumericPriority {
+    my $pri = lc(substr(shift, 0, 4));
+    my %priomap = (
+        'emer' => 0,
+        'aler' => 1,
+        'crit' => 2,
+        'majo' => 2,
+        'erro' => 3,
+        'warn' => 4,
+        'noti' => 5,
+        'mino' => 5,
+        'ok'   => 5,
+        'info' => 6,
+        'norm' => 6,
+        'debu' => 7
+    );
+    return $priomap{$pri} if (defined $priomap{$pri});
+    return 5;
+}
+ 
